openapi: 3.0.0
info:
  description: マッチングアプリ「creamy」 バックエンドAPI仕様書
  version: 1.0.0
  title: creamy API
servers:
  - url: 'https://creamy-app.com/api/v1'
    description: Staging Server
  - url: 'https://creamy-app.com/api/v2'
    description: Develop Server
  - url: 'http://localhost:8080'
    description: Development Server
tags:
  - name: user
    description: Operations about user
  - name: master
    description: Operations about master
  - name: group
    description: Operations about room
  - name: event
    description: Operations about event
  - name: place
    description: Operations about place
  - name: schedule
    description: Operations about schedule
paths:
  /user:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー情報取得
      description: ログインユーザーの情報を取得
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー情報を登録
      description: ログインユーザーの情報を登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  description: ユーザー名
                  type: string
                  example: テストユーザー
                userEmail:
                  description: メールアドレス
                  type: string
                  example: testuser@creamy.com
                userImage:
                  description: 画像URL
                  type: string
                  example: ''
                userDescription:
                  description: ユーザの詳細説明
                  type: string
                  example: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー情報を更新
      description: ログインユーザーの情報を更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  description: ユーザー名
                  type: string
                  example: テストユーザー
                userEmail:
                  description: メールアドレス
                  type: string
                  example: testuser@creamy.com
                userImage:
                  description: 画像URL
                  type: string
                  example: ''
                userDescription:
                  description: ユーザの詳細説明
                  type: string
                  example: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザを削除
      description: ログインユーザをデータベースから削除
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/search:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー検索
      description: ユーザー検索
      parameters:
        - name: userUid
          in: query
          description: ユーザーID
          required: true
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/status:
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: ステータスを更新
      description: ログインユーザーのステータスを更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                statusId:
                  description: ステータスID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/friend:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: フレンド一覧を取得
      description: ログインユーザーのフレンド一覧を取得
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: フレンド申請・承認
      description: ログインユーザからフレンド申請・承認を行う(相互フレンドになるためには双方向からAPIを叩く必要がある)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friendUid:
                  description: フレンドユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          description: すでにフレンドである
          content:
            application/json:
              example:
                status: 422
                message: already friend
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - user
      summary: フレンド解除
      description: ログインユーザからフレンド解除を行う
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friendUid:
                  description: フレンドユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/user/friend/{friendUid}':
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: 相互フレンド認証
      description: ログインユーザとフレンドの相互フレンド認証(1回で相互フレンドになる)
      parameters:
        - name: friendUid
          in: path
          description: フレンドUID
          required: true
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          description: すでにフレンドである
          content:
            application/json:
              example:
                status: 422
                message: already friend
        '500':
          $ref: '#/components/responses/500'
  /user/friend/request:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: フレンドリクエスト一覧を取得
      description: ログインユーザーへのフレンドリクエスト一覧を取得
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/location:
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: 位置情報を更新
      description: ログインユーザーの位置情報を更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  description: 緯度
                  type: number
                  example: 35.38124649867467
                longitude:
                  description: 経度
                  type: number
                  example: 138.72642646486958
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/active:
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザのアクティブ状態の変更
      description: ログインユーザーのアクティブ状態を変更
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isActive:
                  description: アクティブ状態
                  type: bool
                  example: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /status:
    get:
      tags:
        - master
      summary: ステータス一覧を取得
      description: ステータス一覧を取得します
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /answer:
    get:
      tags:
        - master
      summary: ステータス一覧を取得
      description: ステータス一覧を取得します
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /group:
    get:
      security:
        - Bearer: []
      tags:
        - group
      summary: グループ一覧を取得
      description: ユーザーが所属するグループ一覧を取得する
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - group
      summary: グループを新規作成
      description: ログインユーザがオーナーグループを作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  description: ルーム名
                  type: string
                  example: 暇な人集合
                groupImage:
                  description: グループ画像URL
                  type: string
                  example: 'https://creamy-app.com/image.png'
                groupDescription:
                  description: グループの詳細説明
                  type: string
                  example: 暇な人が集まるグループです
                members:
                  description: ルームに招待するユーザUidリスト
                  type: array
                  items:
                    type: string
                    example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - group
      summary: グループを削除
      description: ログインユーザが参加するグループを削除
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  description: グループId
                  type: number
                  example: 2
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /group/invite:
    get:
      security:
        - Bearer: []
      tags:
        - group
      summary: グループ招待可能ユーザ一覧取得
      description: ユーザーが所属するグループに招待可能なフレンド一覧を取得する
      parameters:
        - name: groupId
          in: query
          description: グループID
          required: true
          type: number
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - group
      summary: グループにユーザを招待する
      description: ユーザーが所属するグループにフレンドを招待する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  description: グループID
                  type: number
                  example: 1
                userUid:
                  description: ユーザUid
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          description: すでに招待済みである
          content:
            application/json:
              example:
                status: 422
                message: already invited
        '500':
          $ref: '#/components/responses/500'
  /group/user:
    get:
      security:
        - Bearer: []
      tags:
        - group
      summary: ユーザー一覧を取得
      description: グループ内のユーザー一覧を取得する
      parameters:
        - name: groupId
          in: query
          description: グループID
          required: true
          type: number
          example: 1
        - name: page
          in: query
          description: ページ
          type: number
          example: 1
        - name: pageSize
          in: query
          description: ページサイズ(10<pageSize<100)
          example: 100
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - group
      summary: グループに参加する
      description: ログインユーザがグループに参加する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  description: グループId
                  type: number
                  example: 2
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          description: すでに参加済みである
          content:
            application/json:
              example:
                status: 422
                message: already joined
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - group
      summary: グループから退出する
      description: ログインユーザがグループから退出する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  description: グループId
                  type: number
                  example: 2
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /group/event:
    get:
      security:
        - Bearer: []
      tags:
        - event
      summary: イベント一覧を取得
      description: グループのイベント一覧を取得する
      parameters:
        - name: groupId
          in: query
          description: グループID
          required: true
          type: number
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - event
      summary: イベントを新規作成
      description: グループのイベントを作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  description: グループID
                  required: true
                  example: 1
                eventName:
                  description: イベント名
                  required: true
                  type: string
                  example: 暇な人集合
                eventImage:
                  description: イベント画像URL
                  required: true
                  type: string
                  example: 'https://creamy-app.com/image.png'
                eventDescription:
                  description: イベントの詳細説明
                  required: true
                  type: string
                  example: 暇な人が集まるイベントです
                date:
                  description: イベント日時
                  type: number
                  example: 123456789
                placeId:
                  description: 場所ID
                  type: string
                  example: abcd1234
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security:
        - Bearer: []
      tags:
        - event
      summary: イベントの情報変更
      description: グループのイベント情報変更
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  description: イベントID
                  required: true
                  example: 1
                eventName:
                  description: イベント名
                  required: true
                  type: string
                  example: 暇な人集合
                eventImage:
                  description: イベント画像URL
                  required: true
                  type: string
                  example: 'https://creamy-app.com/image.png'
                eventDescription:
                  description: イベントの詳細説明
                  required: true
                  type: string
                  example: 暇な人が集まるイベントです
                date:
                  description: イベント日時
                  type: number
                  example: 123456789
                placeId:
                  description: 場所ID
                  type: string
                  example: abcd1234
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - event
      summary: イベントを削除
      description: グループのイベントを削除
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  description: eventId
                  type: number
                  example: 2
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /group/event/user:
    post:
      security:
        - Bearer: []
      tags:
        - event
      summary: イベントに参加意思表示をする
      description: ログインユーザがイベントに参加意思表示をする
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  description: イベントId
                  type: number
                  example: 2
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          description: すでに参加済みである
          content:
            application/json:
              example:
                status: 422
                message: already joined
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - event
      summary: イベントへの参加意思を取り消す
      description: ログインユーザのイベントへの参加意思を取り消す
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  description: イベントId
                  type: number
                  example: 2
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /group/event/place:
    get:
      security:
        - Bearer: []
      tags:
        - place
      summary: イベントの場所一覧を取得する
      description: イベントに登録されている場所の情報一覧を取得する
      parameters:
        - name: eventId
          in: query
          description: イベントID
          required: true
          type: number
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventPlace'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - place
      summary: イベントに紐づく場所を登録
      description: イベントに新たな場所の情報を登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                placeId:
                  description: 場所Id
                  'true': string
                  example: ijkl9012
                placeName:
                  description: 場所名
                  type: string
                  example: ''
                address:
                  description: 住所
                  type: string
                  example: ''
                latitude:
                  description: 緯度
                  type: number
                  example: 1
                longitude:
                  description: 経度
                  type: number
                  example: 1
                rate:
                  description: 評価
                  type: number
                  example: 1
                price:
                  description: 価格帯
                  type: number
                  example: 1
                eventId:
                  description: イベントID
                  type: number
                  example: 1
                statusId:
                  description: ステータスID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          description: すでに登録済みである
          content:
            application/json:
              example:
                status: 422
                message: Already Registed
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - place
      summary: イベントに登録されている場所を削除"
      description: イベントに紐付いて登録されている場所情報を削除
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  description: イベントID
                  type: number
                  example: 1
                placeId:
                  description: 場所Id
                  type: string
                  example: ijkl9012
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /group/event/place/favo:
    post:
      security:
        - Bearer: []
      tags:
        - place
      summary: ファボする
      description: イベントに登録されている場所に対してファボする
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  description: イベントID
                  type: number
                  example: 1
                placeId:
                  description: 場所ID
                  type: string
                  example: abcd1234
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - place
      summary: ファボ解除
      description: おすすめの場所に対するファボを解除する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  description: イベントID
                  type: number
                  example: 1
                placeId:
                  description: 場所ID
                  type: string
                  example: abcd1234
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /group/event/place/recommend:
    get:
      security:
        - Bearer: []
      summary: おすすめの場所を検索
      description: グループ情報をもとにおすすめの場所を検索
      tags:
        - place
      parameters:
        - name: eventId
          in: query
          description: イベントID
          required: true
          type: number
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaceInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /group/event/schedule:
    post:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールの候補日を新規作成
      description: グループのスケジュールのアンケートの候補日を新規作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  description: イベントID
                  type: number
                  example: 1
                date:
                  description: 候補日
                  type: number
                  example: 123456789
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケートの候補日を削除
      description: グループのスケジュールのアンケートの候補日を削除
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventScheduleId:
                  description: イベントスケジュールID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /group/event/schedule/answer:
    get:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケート候補と回答を取得
      description: グループのスケジュールのアンケート候補とユーザーの回答を取得
      parameters:
        - name: eventId
          in: query
          description: イベントID
          required: true
          type: number
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケートに回答する
      description: グループのスケジュールのアンケートに回答する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventScheduleId:
                  description: イベントスケジュールID
                  type: number
                  example: 1
                answerId:
                  description: 回答ID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
  schemas:
    AppUser:
      description: アプリユーザー
      type: object
      properties:
        userUid:
          description: ユーザーID
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        userName:
          description: ユーザー名
          type: string
          example: テストユーザー
        userEmail:
          description: メールアドレス
          type: string
          example: testuser@creamy.com
        userImage:
          description: 画像URL
          type: string
          example: ''
        userDescription:
          description: ユーザの詳細説明
          type: string
          example: ''
        isActive:
          description: アクティブかどうか
          type: boolean
          example: false
        statusId:
          description: ステータスID
          type: number
          example: 2
        statusName:
          description: ステータス名
          type: string
          example: 食事
        statusUpdated:
          description: ステータス更新日
          type: number
          example: 123456789
        statusIcon:
          description: ステータスアイコン
          type: number
          example: 61816
        latitude:
          description: 緯度
          type: number
          example: 35.38124649867467
        longitude:
          description: 経度
          type: number
          example: 138.72642646486958
    UserInfo:
      description: ユーザ情報
      type: object
      properties:
        userUid:
          description: ユーザーID
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        userName:
          description: ユーザー名
          type: string
          example: テストユーザー
        email:
          description: メールアドレス
          type: string
          example: testuser@creamy.com
        imageUrl:
          description: 画像URL
          type: string
          example: ''
        isActive:
          description: アクティブかどうか
          type: boolean
          example: false
        createdAt:
          description: 登録日
          type: number
          example: 123456789
        updatedAt:
          description: 更新日
          type: number
          example: 123456789
        deletedAt:
          description: 削除日
          type: string
          example: null
    FriendInfo:
      description: フレンド情報
      type: object
      properties:
        id:
          description: フレンド情報id
          type: int
          example: 1
        userUid:
          description: ユーザーID
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        friendUid:
          description: ユーザーID
          type: string
          example: aaa111
        friendStatus:
          description: 'フレンド状態(0 = User -> Friend, 1 = User <-> Friend)'
          type: int
          example: 0
        createdAt:
          description: 登録日
          type: string
          example: '2021-08-18T17:13:16.501+09:00'
        updatedAt:
          description: 更新日
          type: string
          example: '2021-08-18T17:13:16.501+09:00'
        deletedAt:
          description: 削除日
          type: string
          example: null
    Status:
      description: ステータス
      type: object
      properties:
        id:
          description: ステータスID
          type: number
          example: 2
        statusName:
          description: ステータス名
          type: string
          example: 食事
        statusIcon:
          description: ステータスアイコン
          type: number
          example: 61816
    Group:
      description: グループ
      type: object
      properties:
        groupId:
          description: グループID
          type: number
          example: 1
        groupName:
          description: グループ名
          type: string
          example: 暇な人集まれ！
        groupImage:
          description: グループ画像URL
          type: string
          example: 'https://creamy-app.com/image.png'
        groupDescription:
          description: グループの詳細説明
          type: string
          example: 暇な人が集まるグループです
        memberCount:
          description: ルームの人数
          type: number
          example: 4
        ownerUid:
          description: オーナーID
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        isOwner:
          description: オーナーかどうか
          type: boolean
          example: true
        isJoin:
          description: グループに参加しているかどうか
          type: boolean
          example: true
        users:
          description: グループユーザ一覧
          type: array
          items:
            $ref: '#/components/schemas/AppUser'
    Event:
      description: イベント
      type: object
      properties:
        eventId:
          description: イベントID
          type: number
          example: 1
        eventName:
          description: イベント名
          type: string
          example: テストイベント
        eventImage:
          description: イベント画像URL
          type: string
          example: ''
        eventDescription:
          description: イベント詳細説明
          type: string
          example: ''
        memberCount:
          description: イベントに参加意思表示している人数
          type: number
          example: 1
        isJoin:
          description: 自身がイベントに参加意思表示をしているか
          type: number
          example: true
        date:
          description: イベント日時
          type: number
          example: 123456789
        placeInfo:
          type: object
          properties:
            placeId:
              description: 場所ID
              type: number
              example: 1
            placeName:
              description: 場所名
              type: string
              example: どんぶり居酒屋 喜水丸〜天神店〜
            address:
              description: 住所
              type: string
              example: 福岡市中央区天神２丁目１１−３
            latitude:
              description: 緯度
              type: number
              example: 33.5900179
            longitude:
              description: 経度
              type: number
              example: 130.3988205
            rate:
              description: 評価
              type: number
              example: 3.8
            price:
              description: 価格帯
              type: number
              example: 3
            statusId:
              description: ステータスID
              type: number
              example: 1
            statusName:
              description: ステータス名
              type: string
              example: ''
            statusIcon:
              description: ステータスアイコン
              type: number
              example: 1
        users:
          description: 参加意思表示をしているユーザー
          type: array
          items:
            $ref: '#/components/schemas/AppUser'
    EventPlace:
      description: イベントの場所情報
      type: object
      properties:
        placeId:
          description: 場所ID
          type: string
          example: abcd1234
        placeName:
          description: 場所名
          type: string
          example: どんぶり居酒屋 喜水丸〜天神店〜
        address:
          description: 住所
          type: string
          example: 福岡市中央区天神２丁目１１−３
        latitude:
          description: 緯度
          type: number
          example: 33.5900179
        longitude:
          description: 経度
          type: number
          example: 130.3988205
        rate:
          description: 評価
          type: number
          example: 3.8
        price:
          description: 価格帯
          type: number
          example: 3
        statusId:
          description: ステータスID
          type: number
          example: 1
        statusName:
          description: ステータス名
          type: string
          example: ''
        statusIcon:
          description: ステータスアイコン
          type: number
          example: 1
        favoCount:
          description: ファボしている人数
          type: number
          example: 2
        isFavo:
          description: ファボしているかどうか
          type: boolean
          example: false
        favoUsers:
          description: ファボしているユーザー
          type: array
          items:
            $ref: '#/components/schemas/AppUser'
    PlaceInfo:
      description: 検索結果の場所情報
      type: object
      properties:
        placeId:
          description: 場所ID
          type: string
          example: abcd1234
        placeName:
          description: 場所名
          type: string
          example: どんぶり居酒屋 喜水丸〜天神店〜
        address:
          description: 住所
          type: string
          example: 福岡市中央区天神２丁目１１−３
        latitude:
          description: 緯度
          type: number
          example: 33.5900179
        longitude:
          description: 経度
          type: number
          example: 130.3988205
        rate:
          description: 評価
          type: number
          example: 3.8
        price:
          description: 価格帯
          type: number
          example: 3
        openingHours:
          description: 営業時間情報
          type: object
          properties:
            open_now:
              description: 現在営業中か
              type: bool
              example: true
            periods:
              description: 曜日ごとの営業時間
              type: array
              items:
                type: string
                example: 'Monday: 8:30 am – 5:30 pm'
            weekday_text:
              description: 営業曜日
              type: array
              items:
                type: string
                example: Monday
            permanently_closed:
              description: 閉店しているか
              type: bool
              example: false
        statusId:
          description: ステータスID
          type: number
          example: 2
        statusName:
          description: ステータス名
          type: string
          example: 食事
        statusIcon:
          description: ステータスアイコン
          type: number
          example: 61816
    Answer:
      description: 回答
      type: object
      properties:
        id:
          description: 回答ID
          type: number
          example: 1
        answerName:
          description: 回答
          type: string
          example: 賛成
        answerIcon:
          description: 回答アイコン
          type: number
          example: 58478
    Schedule:
      description: スケジュール
      type: object
      properties:
        groupScheduleId:
          description: グループスケジュールID
          type: number
          example: 1
        date:
          description: 候補日
          type: string
          example: '2021-08-12T18:00:00+09:00'
        answers:
          description: 回答
          type: array
          items:
            type: object
            properties:
              answerId:
                description: ID
                type: number
                example: 1
              answerName:
                description: 回答
                type: string
                example: 賛成
              answerIcon:
                description: 回答アイコン
                type: number
                example: 58478
              memberCount:
                description: 回答しいる人数
                type: number
                example: 1
              users:
                description: 回答しているユーザー
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
    Error:
      description: エラー
      type: object
      properties:
        status:
          description: エラーコード
          type: number
          example: 401
        message:
          description: エラーメッセージ
          type: string
          example: Unauthorized
  responses:
    '200':
      description: 成功
      content:
        application/json:
          example:
            status: 200
            message: success
    '400':
      description: パラメータが不正
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 400
            message: Bad Request
    '401':
      description: 認証失敗
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 401
            message: Unauthorized token
    '404':
      description: データなし
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 404
            message: Data is not found
    '500':
      description: サーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 500
            message: Server Error

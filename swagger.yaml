openapi: 3.0.0
info:
  description: マッチングアプリ「creamy」 バックエンドAPI仕様書
  version: 1.0.0
  title: creamy API
servers:
  - url: 'https://creamy-app.com/api/v1'
    description: Staging Server
  - url: 'http://localhost:8080'
    description: Development Server
tags:
  - name: user
    description: Operations about user
  - name: master
    description: Operations about master
  - name: room
    description: Operations about room
  - name: schedule
    description: Operations about schedule
paths:
  /user:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー情報取得
      description: ログインユーザーの情報を取得
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー情報を登録
      description: ログインユーザーの情報を登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                userName:
                  description: ユーザー名
                  type: string
                  example: テストユーザー
                email:
                  description: メールアドレス
                  type: string
                  example: testuser@creamy.com
                imageUrl:
                  description: 画像URL
                  type: string
                  example: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー情報を更新
      description: ログインユーザーの情報を更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userUid:
                  description: ユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                userName:
                  description: ユーザー名
                  type: string
                  example: テストユーザー
                email:
                  description: メールアドレス
                  type: string
                  example: testuser@creamy.com
                imageUrl:
                  description: 画像URL
                  type: string
                  example: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザを削除
      description: ログインユーザをデータベースから削除
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/search:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー検索
      description: ユーザー検索
      parameters:
        - name: userName
          in: query
          description: ユーザー名
          required: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/status:
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: ステータスを更新
      description: ログインユーザーのステータスを更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                statusId:
                  description: ステータスID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/friend:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: フレンド一覧を取得
      description: ログインユーザーのフレンド一覧を取得
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: フレンド申請・承認
      description: ログインユーザからフレンド申請・承認を行う
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friendUid:
                  description: フレンドユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          description: すでにフレンドである
          content:
            application/json:
              example:
                status: 422
                message: already friend
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - user
      summary: フレンド解除
      description: ログインユーザからフレンド解除を行う
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friendUid:
                  description: フレンドユーザーID
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/user/friend/{friendUid}':
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: 相互フレンド認証
      description: ログインユーザとフレンドの相互フレンド認証
      parameters:
        - name: friendUid
          in: path
          description: フレンドUID
          required: true
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          description: すでにフレンドである
          content:
            application/json:
              example:
                status: 422
                message: already friend
        '500':
          $ref: '#/components/responses/500'
  /user/friend/request:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: フレンドリクエスト一覧を取得
      description: ログインユーザーへのフレンドリクエスト一覧を取得
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/friend/chat:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: フレンドDMチャット一覧を取得
      description: ログインユーザーのフレンドとのDMチャットルーム一覧を取得
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/location:
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: 位置情報を更新
      description: ログインユーザーの位置情報を更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  description: 緯度
                  type: number
                  example: 35.38124649867467
                longitude:
                  description: 経度
                  type: number
                  example: 138.72642646486958
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/active:
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: ユーザー情報を登録
      description: ログインユーザーの情報を登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isActive:
                  description: アクティブ状態
                  type: bool
                  example: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/message:
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: メッセージ取得
      description: ユーザーとフレンドのDMメッセージ一覧を取得する
      parameters:
        - name: friendUid
          in: query
          description: フレンドUid
          required: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: メッセージ送信
      description: ユーザーのフレンドにDMメッセージを送信する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friendUid:
                  description: フレンドUid
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
                message:
                  description: メッセージの内容
                  type: string
                  example: こんにちは！
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /status:
    get:
      tags:
        - master
      summary: ステータス一覧を取得
      description: ステータス一覧を取得します
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /answer:
    get:
      tags:
        - master
      summary: ステータス一覧を取得
      description: ステータス一覧を取得します
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /room:
    get:
      security:
        - Bearer: []
      tags:
        - room
      summary: ルーム一覧を取得
      description: ユーザーが所属するルーム一覧を取得する
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - room
      summary: ルームを新規作成
      description: ログインユーザがオーナーのルームを作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomName:
                  description: ルーム名
                  type: string
                  example: 暇な人集合
                roomRange:
                  description: 'ルーム公開範囲（0:フレンド全体, 1:招待制）'
                  type: number
                  example: 0
                members:
                  description: ルームに招待するユーザUid
                  type: array
                  items:
                    type: string
                    example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - room
      summary: ルームを削除
      description: ログインユーザが参加するルームを削除
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  description: ルームId
                  type: number
                  example: 2
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /room/participate:
    get:
      security:
        - Bearer: []
      tags:
        - room
      summary: 招待ルーム一覧を取得
      description: ユーザーが招待されているルーム一覧を取得する
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /room/invite:
    get:
      security:
        - Bearer: []
      tags:
        - room
      summary: ルーム招待可能ユーザ一覧取得
      description: ユーザーが所属するルームに招待可能なフレンド一覧を取得する
      parameters:
        - name: roomId
          in: query
          description: ルームID
          required: true
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - room
      summary: ルームにユーザを招待する
      description: ユーザーが所属するルームにフレンドを招待する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  description: ルームID
                  type: number
                  example: 1
                userUid:
                  description: ユーザUid
                  type: string
                  example: xWDG67WKXjROfE22eMEOd7rvYU12
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /room/message:
    get:
      security:
        - Bearer: []
      tags:
        - room
      summary: メッセージ取得
      description: ユーザーが所属するルーム上のメッセージ一覧を取得する
      parameters:
        - name: roomId
          in: query
          description: ルームID
          required: true
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomMessage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - room
      summary: メッセージ送信
      description: ユーザーが所属するルーム上にメッセージを送信する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  description: ルームID
                  type: number
                  example: 1
                message:
                  description: メッセージの内容
                  type: string
                  example: こんにちは！
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /room/user:
    get:
      security:
        - Bearer: []
      tags:
        - room
      summary: ユーザー一覧を取得
      description: ルーム内のユーザー一覧を取得する
      parameters:
        - name: roomId
          in: query
          description: ルームID
          required: true
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - room
      summary: ルームに参加する
      description: ログインユーザがルームに参加する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  description: ルームId
                  type: number
                  example: 2
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - room
      summary: ルームから退出する
      description: ログインユーザがルームから退出する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  description: ルームId
                  type: number
                  example: 2
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /place:
    get:
      security:
        - Bearer: []
      tags:
        - room
      summary: おすすめの場所一覧を取得する
      description: ルームの参加メンバー情報をもとにおすすめの場所一覧を取得する
      parameters:
        - name: roomId
          in: query
          description: ルームID
          required: true
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /place/favo:
    post:
      security:
        - Bearer: []
      tags:
        - room
      summary: ファボする
      description: おすすめの場所に対してファボする
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  description: ルームID
                  type: number
                  example: 1
                placeId:
                  description: 場所ID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - room
      summary: ファボ解除
      description: おすすめの場所に対するファボを解除する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  description: ルームID
                  type: number
                  example: 1
                placeId:
                  description: 場所ID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /schedule:
    get:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケート一覧を取得
      description: ルームのスケジュールに関するアンケート一覧を取得
      parameters:
        - name: roomId
          in: query
          description: ルームID
          required: true
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    scheduleQuestionnaireId:
                      description: アンケートID
                      type: number
                      example: 1
                    title:
                      description: タイトル
                      type: string
                      example: 食事会
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケートを新規作成
      description: ルームのスケジュールのアンケートを新規作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  description: ルームID
                  type: number
                  example: 1
                title:
                  description: アンケート名
                  type: string
                  example: BBQ
                date:
                  description: 候補日
                  type: array
                  items:
                    type: string
                    example: '2021-08-22T18:00:00+09:00'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケートを削除
      description: ルームのスケジュールのアンケートを削除
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scheduleQuestionnaireId:
                  description: アンケートID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /schedule/candidate:
    post:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケートに候補日を追加
      description: ルームのスケジュールのアンケートに候補日を追加
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scheduleQuestionnaireId:
                  description: アンケートID
                  type: number
                  example: 1
                date:
                  description: 候補日
                  type: string
                  example: '2021-08-22T18:00:00+09:00'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケートに候補日を削除
      description: ルームのスケジュールのアンケートに候補日を削除
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                candidateDateId:
                  description: 候補日ID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /schedule/answer:
    get:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケート候補と回答を取得
      description: ルームのスケジュールのアンケート候補とユーザーの回答を取得
      parameters:
        - name: scheduleQuestionnaireId
          in: query
          description: アンケートID
          required: true
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      security:
        - Bearer: []
      tags:
        - schedule
      summary: スケジュールのアンケートに回答する
      description: ルームのスケジュールのアンケートに回答する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  description: ルームID
                  type: number
                  example: 1
                candidateDateId:
                  description: 候補日ID
                  type: number
                  example: 1
                answerId:
                  description: 回答ID
                  type: number
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
  schemas:
    AppUser:
      description: アプリユーザー
      type: object
      properties:
        userUid:
          description: ユーザーID
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        userName:
          description: ユーザー名
          type: string
          example: テストユーザー
        email:
          description: メールアドレス
          type: string
          example: testuser@creamy.com
        imageUrl:
          description: 画像URL
          type: string
          example: ''
        isActive:
          description: アクティブかどうか
          type: boolean
          example: false
        statusId:
          description: ステータスID
          type: number
          example: 2
        statusName:
          description: ステータス名
          type: string
          example: 食事
        statusUpdated:
          description: ステータス更新日
          type: string
          example: '2021-08-18T17:13:16.501+09:00'
        statusIcon:
          description: ステータスアイコン
          type: number
          example: 61816
        latitude:
          description: 緯度
          type: number
          example: 35.38124649867467
        longitude:
          description: 経度
          type: number
          example: 138.72642646486958
    UserInfo:
      description: ユーザ情報
      type: object
      properties:
        userUid:
          description: ユーザーID
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        userName:
          description: ユーザー名
          type: string
          example: テストユーザー
        email:
          description: メールアドレス
          type: string
          example: testuser@creamy.com
        imageUrl:
          description: 画像URL
          type: string
          example: ''
        isActive:
          description: アクティブかどうか
          type: boolean
          example: false
        createdAt:
          description: 登録日
          type: string
          example: '2021-08-18T17:13:16.501+09:00'
        updatedAt:
          description: 更新日
          type: string
          example: '2021-08-18T17:13:16.501+09:00'
        deletedAt:
          description: 削除日
          type: string
          example: null
    FriendInfo:
      description: フレンド情報
      type: object
      properties:
        id:
          description: フレンド情報id
          type: int
          example: 1
        userUid:
          description: ユーザーID
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        friendUid:
          description: ユーザーID
          type: string
          example: aaa111
        friendStatus:
          description: 'フレンド状態(0 = User -> Friend, 1 = User <-> Friend)'
          type: int
          example: 0
        createdAt:
          description: 登録日
          type: string
          example: '2021-08-18T17:13:16.501+09:00'
        updatedAt:
          description: 更新日
          type: string
          example: '2021-08-18T17:13:16.501+09:00'
        deletedAt:
          description: 削除日
          type: string
          example: null
    Status:
      description: ステータス
      type: object
      properties:
        id:
          description: ステータスID
          type: number
          example: 2
        statusName:
          description: ステータス名
          type: string
          example: 食事
        statusIcon:
          description: ステータスアイコン
          type: number
          example: 61816
    Room:
      description: ルーム
      type: object
      properties:
        roomId:
          description: ルームID
          type: number
          example: 1
        roomName:
          description: ルーム名
          type: string
          example: 暇な人集まれ！
        roomRange:
          description: 'ルーム公開範囲（0:公開, 1:招待性）'
          type: number
          example: 0
        roomMember:
          description: ルームの人数
          type: number
          example: 4
        ownerUid:
          description: オーナーID
          type: string
          example: xWDG67WKXjROfE22eMEOd7rvYU12
        isOwner:
          description: オーナーかどうか
          type: boolean
          example: true
    Message:
      description: メッセージ
      type: object
      properties:
        message:
          description: メッセージ内容
          type: string
          example: こんにちは！
        time:
          description: 登録日
          type: string
          example: '2021-08-18T17:13:16.501+09:00'
        user:
          description: ユーザー情報
          $ref: '#/components/schemas/AppUser'
    RoomMessage:
      description: ルームメッセージ
      type: object
      properties:
        roomId:
          description: ルームID
          type: number
          example: 1
        roomName:
          description: ルーム名
          type: string
          example: 暇な人集まれ！
        messages:
          description: メッセージ一覧
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Place:
      description: 場所
      type: object
      properties:
        placeId:
          description: 場所ID
          type: number
          example: 1
        placeName:
          description: 場所名
          type: string
          example: ''
        address:
          description: 住所
          type: string
          example: ''
        latitude:
          description: 緯度
          type: number
          example: 1
        longitude:
          description: 経度
          type: number
          example: 1
        rate:
          description: 評価
          type: number
          example: 1
        price:
          description: 価格帯
          type: number
          example: 1
        statusId:
          description: ステータスID
          type: number
          example: 1
        statusName:
          description: ステータス名
          type: string
          example: ''
        statusIcon:
          description: ステータスアイコン
          type: number
          example: 1
        isFavo:
          description: ファボしているかどうか
          type: boolean
          example: false
        favoUsers:
          description: ファボしているユーザー
          type: array
          items:
            $ref: '#/components/schemas/AppUser'
    Answer:
      description: 回答
      type: object
      properties:
        id:
          description: 回答ID
          type: number
          example: 1
        answerName:
          description: 回答
          type: string
          example: 賛成
        answerIcon:
          description: 回答アイコン
          type: number
          example: 58478
    Schedule:
      description: スケジュール
      type: object
      properties:
        candidateDateId:
          description: ID
          type: number
          example: 1
        date:
          description: 候補日
          type: string
          example: '2021-08-12T18:00:00+09:00'
        answers:
          description: 回答
          type: array
          items:
            type: object
            properties:
              answerId:
                description: ID
                type: number
                example: 1
              answerName:
                description: 回答
                type: string
                example: 賛成
              answerIcon:
                description: 回答アイコン
                type: number
                example: 58478
              user:
                description: 回答しているユーザー
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
    Error:
      description: エラー
      type: object
      properties:
        status:
          description: エラーコード
          type: number
          example: 401
        message:
          description: エラーメッセージ
          type: string
          example: Unauthorized
  responses:
    '200':
      description: 成功
      content:
        application/json:
          example:
            status: 200
            message: success
    '400':
      description: パラメータが不正
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 400
            message: Bad Request
    '401':
      description: 認証失敗
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 401
            message: Unauthorized token
    '404':
      description: データなし
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 404
            message: Data is not found
    '500':
      description: サーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 500
            message: Server Error
